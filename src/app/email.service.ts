import { Injectable } from '@angular/core';
import emailjs from '@emailjs/browser';

export interface SMTPConfig {
  serviceId: string;
  templateId: string;
  publicKey: string;
  fromName: string;
  fromEmail: string;
  toEmail: string;
  // Legacy fields for backward compatibility
  host?: string;
  port?: number;
  secure?: boolean;
  username?: string;
  password?: string;
}

@Injectable({
  providedIn: 'root'
})
export class EmailService {

  constructor() { }

  async testConnection(config: SMTPConfig): Promise<{ success: boolean; message: string }> {
    if (!config.serviceId || !config.templateId || !config.publicKey) {
      return {
        success: false,
        message: 'Please fill in all required EmailJS settings (Service ID, Template ID, Public Key) ‚ö†Ô∏è'
      };
    }

    try {
      // Test by sending a test email
      const testParams = {
        from_name: config.fromName || 'Habiti Test',
        from_email: config.fromEmail,
        to_email: config.toEmail,
        subject: 'Habiti EmailJS Connection Test',
        message: 'This is a test message to verify your EmailJS configuration is working correctly.'
      };

      await emailjs.send(config.serviceId, config.templateId, testParams, config.publicKey);
      
      return {
        success: true,
        message: 'EmailJS connection successful! Test email sent ‚úÖ'
      };
    } catch (error: any) {
      console.error('EmailJS connection failed:', error);
      
      let errorMessage = 'EmailJS connection failed: ';
      
      if (error.status === 400) {
        errorMessage += 'Bad request. Please check your Service ID and Template ID.';
      } else if (error.status === 401) {
        errorMessage += 'Unauthorized. Please check your Public Key.';
      } else if (error.status === 404) {
        errorMessage += 'Service or template not found. Please verify your Service ID and Template ID.';
      } else if (error.text) {
        errorMessage += error.text;
      } else {
        errorMessage += error.message || 'Unknown error occurred.';
      }
      
      return {
        success: false,
        message: errorMessage + ' ‚ùå'
      };
    }
  }

  async sendEmail(config: SMTPConfig, subject: string, body: string): Promise<{ success: boolean; message: string }> {
    if (!config.serviceId || !config.templateId || !config.publicKey) {
      return {
        success: false,
        message: 'Please configure EmailJS settings first ‚ö†Ô∏è'
      };
    }

    try {
      const emailParams = {
        from_name: config.fromName || 'Habiti App',
        from_email: config.fromEmail,
        to_email: config.toEmail,
        subject: subject,
        message: body,
        html_message: this.formatEmailHTML(body)
      };

      const result = await emailjs.send(config.serviceId, config.templateId, emailParams, config.publicKey);
      
      return {
        success: true,
        message: `Email report sent successfully! Status: ${result.status} ‚úÖ`
      };
      
    } catch (error: any) {
      console.error('Email sending failed:', error);
      
      let errorMessage = 'Failed to send email: ';
      
      if (error.status === 400) {
        errorMessage += 'Bad request. Please check your template parameters.';
      } else if (error.status === 401) {
        errorMessage += 'Unauthorized. Please check your Public Key.';
      } else if (error.status === 402) {
        errorMessage += 'Email limit exceeded. Please check your EmailJS account.';
      } else if (error.text) {
        errorMessage += error.text;
      } else {
        errorMessage += error.message || 'Unknown error occurred.';
      }
      
      return {
        success: false,
        message: errorMessage + ' ‚ùå'
      };
    }
  }

  private formatEmailHTML(text: string): string {
    return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Habiti Progress Report</title>
  <style>
    body { font-family: 'Courier New', monospace; background-color: #f5f5f5; margin: 0; padding: 20px; }
    .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .header { text-align: center; color: #333; border-bottom: 2px solid #4F46E5; padding-bottom: 20px; margin-bottom: 20px; }
    .content { white-space: pre-line; color: #444; line-height: 1.6; }
    .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üéÆ Habiti Progress Report</h1>
      <p>Your Personal Habit Tracking Summary</p>
    </div>
    <div class="content">${text.replace(/\n/g, '<br>')}</div>
    <div class="footer">
      <p>Generated by Habiti - Your Personal Habit Tracker</p>
      <p>Keep building those healthy habits! üí™</p>
    </div>
  </div>
</body>
</html>`;
  }
}